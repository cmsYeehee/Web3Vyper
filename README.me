I'll create a README that reflects the updated methods in your Vyper 0.4.0 contracts:

# Blockchain Battle Arena: Smart Contract Documentation

## Overview

Blockchain Battle Arena is a decentralized, turn-based strategic combat game built on Ethereum using Vyper 0.4.0 smart contracts. Players create unique character NFTs, collect items, and engage in strategic battles.

## Character Contract Methods

### Character Creation & Management

- `create_character(name: String[64], class_choice: uint8) -> uint256`
  - Creates a new character NFT
  - Parameters: Character name, class selection
  - Returns: Newly minted character token ID

- `toggle_battle_availability(token_id: uint256)`
  - Toggles a character's availability for battle
  - Allows/prevents character from participating in combat

- `level_up(token_id: uint256)`
  - Increases character level
  - Requires sufficient experience points
  - Grants stat improvements

- `add_experience(token_id: uint256, amount: uint16)`
  - Adds experience points to a character
  - Called after battles or special events

- `update_battle_record(token_id: uint256, is_winner: bool)`
  - Updates character's win/loss record
  - Tracks battle performance

### Utility Methods

- `get_character_count() -> uint256`
  - Returns total number of characters created

- `get_character_at_index(index: uint256) -> uint256`
  - Retrieves character token ID by index
  - Useful for iterating through characters

- `get_character_class_name(class_type: uint8) -> String[10]`
  - Converts class ID to human-readable name
  - Returns class name (e.g., "Warrior", "Mage")

- `get_character_details(token_id: uint256) -> (...)`
  - Retrieves comprehensive character information
  - Returns name, class, stats, experience, battle record

## Item Contract Methods

### Item Creation & Management

- `create_item(name: String[64], item_type: uint8, rarity: uint8) -> uint256`
  - Creates a new item NFT
  - Parameters: Item name, type, rarity
  - Returns: Newly minted item token ID

- `transfer_item(item_id: uint256, to: address)`
  - Transfers item ownership
  - Requires current owner initiation

### Utility Methods

- `get_item_count() -> uint256`
  - Returns total number of items created

- `get_item_at_index(index: uint256) -> uint256`
  - Retrieves item token ID by index

- `get_item_type_name(item_type: uint8) -> String[10]`
  - Converts item type ID to human-readable name
  - Returns type name (e.g., "Weapon", "Armor")

- `get_rarity_stars(rarity: uint8) -> String[5]`
  - Converts rarity level to star representation

- `get_item_details(token_id: uint256) -> (...)`
  - Retrieves comprehensive item information
  - Returns name, type, bonuses, rarity

## Battle Game Contract Methods

### Battle Management

- `equip_item(character_id: uint256, item_id: uint256)`
  - Equips an item to a character
  - Requires ownership of both character and item
  - Assigns item to appropriate slot

- `battle(character_id1: uint256, character_id2: uint256)`
  - Initiates battle between two characters
  - Calculates winner based on power and randomness
  - Awards experience points
  - Updates battle records

### Utility Methods

- `get_equipped_items(character_id: uint256) -> (uint256, uint256, uint256)`
  - Returns IDs of equipped items
  - Order: Weapon, Armor, Accessory

- `get_battle_record(battle_id: uint256) -> (...)`
  - Retrieves details of a specific battle
  - Returns participant IDs, winner, timestamp

- `get_battle_count() -> uint256`
  - Returns total number of battles

## Battle Mechanics

1. Characters must be available for battle
2. Battle outcome determined by:
   - Base character stats
   - Equipped item bonuses
   - Randomness factor

3. Experience distribution:
   - Winner: 50 XP
   - Loser: 20 XP

## Deployment Considerations

- Deployed on Ethereum Sepolia Testnet
- Requires MetaMask wallet connection
- Gas fees apply for contract interactions

## Getting Started

1. Connect MetaMask wallet
2. Create characters
3. Acquire items
4. Equip items
5. Battle other characters
6. Level up and improve your roster

Would you like me to elaborate on any specific section or provide more details about the contract interactions?